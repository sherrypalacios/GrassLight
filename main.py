# PROGRAM GL
# ***************************************************************
# GrassLight Ver 2.15
# Computes radiative transfer and carbon balance of seagrass canopies
#
# Subroutines required:
# ----------------------------------------------------
#   BIODIS  - computes biomass distribution from canopy ht and bending angle.
#		EDCALC  - computes radiative transfer through the canopy and light absorbed
#				      for photosynthesis.
#		PRODUCT - computes whole plant production, respiration and carbon balance.
#   OWQINIT - Optical water quality subroutine, created by CLG to compute 
#             irradiance at top of seagrass canopy from WQ data, depth and
#             canopy height.  Additional subroutines are required by OWQINIT
#		
#	Definitions of variables passed between main program and subroutines
# can be found in each of the subroutines.
#
#	Definitions of common block variables: 
# ----------------------------------------------------
#       /REGRES/DENSITER(10),PTORITER(10),ITER,RUN
#       used by optimization regression procedure to accumulate
#       iterative values of shoot density, P:R, Iteration # and RUN status O
#
# Definitions of other common variables can be found in each of the subroutines.
#
# Files required by GL as inputs:
# ----------------------------------------------------
#         DEFAULT.DAT contains default paramater values and file names required to run GL
#
# Files generated by GL:
# ----------------------------------------------------
#         CANHTZ.TXT created by GL to pass data on canopy ht and water depth among subroutines
#         GLRESULT.DAT contains the output results from the latest run; the name of the output file
#         can be changed by the user through menu option 18.  This file is written to by 
#         Subroutines EDCALC and PRODUC
#
# CHECK PAST FILE FOR UPDATE NOTES
#	********************************************************************

import os
import numpy as np


# PROGRAM DATA CLASS
#	********************************************************************
class programData():
  copyright = "Copyright (c) 2016 by R. C. Zimmerman and C. L. Gallegos"
  version   = "1.0"
  iteration = 0
  OWQFLG    = 0

# CREATE OUTPUT FILE
#	********************************************************************
os.remove("RESULT.txt")
outputFile = open("RESULT.txt", 'x')
outputFile.close()

# DEFAULT DATA
#	********************************************************************
default = np.loadtxt("DATA/default.txt")

class default():
  maxHeight = default[0]
  bioDis    = default[1]
  density   = default[2]
  leafArea  = default[3]
  shootRoot = default[4]
  beta0     = default[5]
  curVel    = default[6]
  pH        = default[7]
  temp      = default[8] 
  epi       = default[9] 
  dayLen    = default[10]
  mubard    = default[11] 
  irr       = default[12]
  asymp     = default[13]
  inflec    = default[14]
  shape     = default[15]

  depi = 0.3792*epi      #From Bulthuis & Woelkerling 1983
  aepi = 1. -10**(-depi)  #Epiphyte absorptance

  runType = "Single Run"
  
  #TO-DO: Fill up empty constants 
  change = 1;
  # variables passed into BIODIS.py
    # MAXHT
    # DENSITY
    # CURVEL
  biomass = 100; area = None; LAI = 100; 
  projec = None; LAP = 100;
  wave = None; waveLED = 100;
  prod = None; piz = 100; alpha = 100;
  E0 = 100;
  convrg = None; 
  done = None; finl = None; run = 0;
  
  irrFile     = 'example.txt'     #Irradiance file
  sedrefFile  = 'silica.txt'      #Sediment reflectance file
  leafIopFile = 'zostera.txt'     #Leaf IOPs 

#the following conditional will determine whether the user is supplying their own values for asymp, inflec, and shape, or if they need these values to be calculated relative to other given values
  
if ((default.asymp == 0) and (default.inflec == 0) and (default.shape == 0)):
    #BIOPARAM=RELATIVE
    #program receives no value other than 0 from default.txt, so it calculates the values of asymp, inflec, and shape using other given values
    #see page 8 of user manual for GrassLight
    bioDis = 0;
else:
    #BIOPARAM=USERSUPL
    #program receives at least one value other than zero and assigns these values to the proper variables
    bioDis = 1;

class E0input():
  H0 = 301
  AOZ = 301
  AW_INC = 301
  AOX = 301

siteDataInfo = np.loadtxt("DATA/sitedata.txt")

class siteData():
  latitude = siteDataInfo[0] 
  longitude = siteDataInfo[1]
  JD = siteDataInfo[2]
  HR = siteDataInfo[3]
  TOTALZ = siteDataInfo[4]
  CDOM = siteDataInfo[5]
  ChlA = siteDataInfo[6]
  turb = siteDataInfo[7]

# # test for siteData values
# print(siteData.latitude)
# print(siteData.longitude)
# print(siteData.JD)
# print(siteData.HR)
# print(siteData.TOTALZ)
# print(siteData.CDOM)
# print(siteData.ChlA)
# print(siteData.turb)

# siteDataInfo.close()

atmosInfo = np.loadtxt("CONSTANTS/atmos.txt")
class atmos():
  AM = atmosInfo[0]
  WM = atmosInfo[1]
  W = atmosInfo[2]
  RH = atmosInfo[3]
  PRESS = atmosInfo[4]
  WV = atmosInfo[5]
  HA = atmosInfo[6]
  V = atmosInfo[7]

# # test for atmosInfo values
# print(atmos.AM)
# print(atmos.WM)
# print(atmos.W)
# print(atmos.RH)
# print(atmos.PRESS)
# print(atmos.WV)
# print(atmos.HA)
# print(atmos.V)


IOParraysInfo = np.loadtxt("CONSTANTS/IOParrays.txt")
countvalue = IOParraysInfo[0][0]
count = int(countvalue)
# print(count)

class IOParrays():
  WL = [0] * count
  AW = [0] * count
  BW = [0] * count
  APHNORM = [0] * count
  # print(WL)
  # # read in first value in IOParrays (amount of elements in each array) (TOTAL)
  # # initialize array for each with 0 in TOTAL spaces 
  # # loop for that many iterations
  # # inside loop 
  #   ## read in first value on the line to WL array
  #   ## read in second value on the line to AW array
  #   ## read in third value on the line to BW array
  #   ## read in fourth value on the line to APHNORM array
  # # read whole file into list and split
  iter = 0
  for line in IOParraysInfo:
    if iter == 0:
      iter += 1
      continue
    else:
      WL[iter - 1] = IOParraysInfo[iter][0]
      AW[iter - 1] = IOParraysInfo[iter][1]
      BW[iter - 1] = IOParraysInfo[iter][2]
      APHNORM[iter - 1] = IOParraysInfo[iter][3]
      iter += 1
  # print(IOParraysInfo[0][2])
  # print(WL)
  #### change to .append eventually... at some point


IOPconstantsInfo = np.loadtxt("CONSTANTS/IOPconstants.txt")

class IOPconstants():
  AG440 = IOPconstantsInfo[0] #Abs cross section for non-algal part. at 440 nm
  SG = IOPconstantsInfo[1]
  SIGATRB = IOPconstantsInfo[2]
  STRB = IOPconstantsInfo[3]
  BLTRB = IOPconstantsInfo[4]
  SIGBTRB = IOPconstantsInfo[5]
  ETA = IOPconstantsInfo[6]
  BB2B = IOPconstantsInfo[7]
  APHST675 = IOPconstantsInfo[8] #Chl-specific abs at 675 nm

# #test for IOPconstants values
# print(IOPconstants.AG440)
# print(IOPconstants.SG)
# print(IOPconstants.SIGATRB)
# print(IOPconstants.STRB)
# print(IOPconstants.BLTRB)
# print(IOPconstants.SIGBTRB)
# print(IOPconstants.ETA)
# print(IOPconstants.BB2B)
# print(IOPconstants.APHST675)


class E0data():
  ED5NM=61; THETAZ=None;

class canopy():
  TOTALZ = 1
  canopyHeight = default.maxHeight/1000
  ZTOC = None

class common():
  E0input = E0data; 
  siteData = siteData; 
  atmos = atmos,;
  IOParrays = IOParrays;
  IOPconstants = IOPconstants,;
  E0data= E0data,;
  canopy= canopy;
  
# CANHTZ DATA
#	********************************************************************
canhtz = open("CONSTANTS/canhtz.txt", "w");
  #TO-DO: write canopyheight, daylen, and totalz to canhtz file
  ## daylen represents day length
  ## totalz represents total depth 

canhtz.write(str(canopy.canopyHeight))
canhtz.write("\n")
canhtz.write(str(siteData.JD))
canhtz.write("\n")
canhtz.write(str(canopy.TOTALZ))
canhtz.write("\n")
  
canhtz.close()

# COMMON VARIABLES SORTED INTO CLASSES
#	********************************************************************
#TO-DO: Fill up empty constants 

# COPYRIGHT HEADER
# ********************************************************************
print(programData.copyright)
print("Version ", programData.version)
print(" ")
print(" ")

# PARAMTER MENU
#	********************************************************************

#print out paramteres and allow for user input and alteration
#this is majority of work in this program

  ## need to update numbers for user input

def printMenu(default, programData, outputFile, canopy):
  print("")
  print(' 1) Canopy height = ', default.maxHeight, 'mm')
  print(' 2) Shoot biomass distribution = ', end = " ")
  if default.bioDis == 0:
    print("Height-Relative")
  elif default.bioDis == 1:
    print("User Inputed")
  print(' 3) Shoot density = ', default.density, 'shoots/m^2')
  print(' 4) Shoot leaf area = ', default.leafArea, 'mm/shoot' )
  print(' 5) Shoot:Root Ratio = ', default.shootRoot)
  print(' 6) Bending angle at 0 flow = ', default.beta0, 'deg')
  print(' 7) Current speed = ', default.curVel , 'cm/s')
  print(' 8) Seawater pH = ', default.pH)
  print(' 9) Seawater temperature = ', default.temp , 'deg C')
  print('10) Sediment reflectence from FILE: ' )
  print('11) Leaf optical properties from FILE: ' )
  print('12) Leaf epiphyte load = ', default.epi ,'mg/cm^2')
  print('13) Irradiance and Kd from FILE: ')
  print('14) Photoperiod = ', default.dayLen , 'hours')
  print('15) Average cosine (mu-bar) of Ed = ', default.mubard )
  print('16) Write irradiances every = ', default.irr, 'cm')
  print('17) Run Type: ', default.runType)
  print('18) Results saved in FILE: ', outputFile.name)
  print('19) Continue to calculations')
  print('20) Quit GL')
  print("")

userInput = 0
userValue = 0

print("Welcome to GrassLight Version 1.0")

while(userInput != 18):
  #startup
  printMenu(default, programData, outputFile, canopy)
  userInput = input("Enter number to change select variable: ")
  userInput = int(userInput)
  
  #------------------------------------------------------
  #canopy height 
  if(userInput == 1):
    userValue = input("Enter new canopy height: ")
    userValue = float(userValue)
    
    if(userValue > 0.0):
      canopy.canopyHeight = userValue
    else:
      print("Error invalid canopy height")
  #------------------------------------------------------
  #shoot biomass
  elif(userInput == 2):
    userValue = input("Would you like to enter your own parameters? (y/n): ")
    # userValue = int(userValue);
    
    if(userValue == "n" or userValue == "N"):
      default.bioDis = 0
    elif(userValue == "y" or userValue == "Y"):
      default.bioDis = 1
    else:
      print("Error invalid selection")

    if(default.bioDis == 1):
      print("")
      print("Enter new biomass distribution parameters: ")
      userInpBio = input("Asymptote (% biomass): ")
      default.asymp = float(userInpBio)
      userInpBio = input("Inflection Depth (mm): ")
      default.inflec = float(userInpBio)
      userInpBio = input("Shape Parameter: ")
      default.shape = float(userInpBio)
      print(" ")
      print("New parameters: ")
      print("Asymptote: ", default.asymp)
      print("Inflection: ", default.inflec)
      print("Shape: ", default.shape)
  #------------------------------------------------------
  #shoot density
  elif(userInput == 3):
    userValue = input("Enter new shoot density: ")
    userValue = float(userValue)
    
    if(userValue > 0.0):
      default.density = userValue
    else:
      print("Error invalid density")
  #------------------------------------------------------
  #shoot leaf area
  elif(userInput == 4):
    userValue = input("Enter shoot leaf area: ")
    userValue = float(userValue)
    
    if(userValue > 0.0):
      default.leafArea = userValue
    else:
      print("Error invalid shoot leaf area")
  #------------------------------------------------------
  #shoot root ratio
  elif(userInput == 5):
    userValue = input("Enter new shoot root ratio: ")
    userValue = float(userValue)
    
    if(userValue > 0.0):
      pass
    else:
      print("Error invalid shoot root ratio")
  #------------------------------------------------------
  #bending angle
  elif(userInput == 6):
    userValue = input("Enter new bending angle: ")
    userValue = float(userValue)
    
    if(userValue > 0.0 and userValue < 180.0):
      default.beta0 = userValue
    else:
      print("Error invalid bending angle")
  #------------------------------------------------------
  #current speed
  elif(userInput == 7):
    userValue = input("Enter new current speed: ")
    userValue = float(userValue)
    
    if(userValue >= 0.0):
      default.curvel = userValue
    else:
      print("Error invalid current speed")
  #------------------------------------------------------
  #seawater pH
  elif(userInput == 8):
    userValue = input("Enter new seawater pH: ")
    userValue = float(userValue)
    
    if(userValue > 6.0 and userValue < 10.0):
      default.ph = userValue
    else:
      print("Error invalid pH")
  #------------------------------------------------------
  #temperature
  elif(userInput == 9):
    userValue = input("Enter new seawater temperature: ")
    userValue = float(userValue)
    
    if(userValue):
      default.temp = userValue
    else:
      print("Error invalid temperature")
  #------------------------------------------------------
  #sediment reflectance
  elif(userInput == 10):
    userValue = input("Enter new sediment reflectance FILE: ")
    userValue = (userValue)
    
    if(userValue == "carbonate.txt" or userValue == "mud.txt" or userValue == "silica.txt"):
      pass
    else:
      print("Error invalid sediment reflectance FILE")
  #------------------------------------------------------
  #leaf optical properties
  elif(userInput == 11):
    userValue = input("Enter new leaf optical properties FILE: ")
    userValue = (userValue)
    
    if(userValue == "thalass.txt" or userValue == "zostera.txt"):
      pass
    else:
      print("Error invalid leaf optical properties FILE")
  #------------------------------------------------------
  #leaf epiphyte load
  elif(userInput == 12):
    userValue = input("Enter new leaf epiphyte load: ")
    userValue = float(userValue)
    
    if(userValue > 0.0):
      default.epi = userValue
    else:
      print("Error invalid leaf epiphyte load")
  #------------------------------------------------------
  #irradiance and KD
  elif(userInput == 13):
    userValue = input("Enter new irradiance FILE: ")
    userValue = (userValue)
    
    if(userValue == "example.txt"):
      pass
    else:
      print("Error invalid irradiance FILE")
  #------------------------------------------------------
  #Photoperiod
  elif(userInput == 14):
    userValue = input("Enter new photoperiod: ")
    userValue = float(userValue)
    
    if(userValue > 0.0 and userValue < 24.0):
      default.daylen = userValue
    else:
      print("Error invalid photoperiod")
  #------------------------------------------------------
  #mu-bar
  elif(userInput == 15):
    userValue = input("Enter new average cosine: ")
    userValue = float(userValue)
    
    if(userValue >= -1.0 and userValue <= 1.0):
      default.mubard = userValue
    else:
      print("Error invalid average cosine")
  #------------------------------------------------------
  #amount of cm per write
  elif(userInput == 16):
    userValue = input("Enter new distance between irradiances: ")
    userValue = float(userValue)
    
    if(userValue > 0.0):
      pass
    else:
      print("Error invalid distnace between irradiances")
  #------------------------------------------------------
  #run type
  elif(userInput == 17):
    userValue = input("Enter run type (1 for single or 2 for double): ")
    userValue = int(userValue)
    
    if(userValue == 1):
      default.runType = "Single Run"
    elif(userValue == 2):
      default.runType = "Double Run"
    else:
      print("Error invalid run type")
  #------------------------------------------------------
  #results location
  elif(userInput == 18):
    userValue = input("Enter new file to write results: ")
    userValue = (userValue)
    
    if(userValue == "RESULT.txt"):
      outputFile.name = userValue
    else:
      print("Error invalid filename")
  #------------------------------------------------------
  #continue
  elif(userInput == 19):
    programData.iteration += 1
    print("This is where functions will be called")
    break
  #------------------------------------------------------
  #quit
  elif(userInput == 20):
    if(programData.iteration == 1):
      print("You ran the program 1 time")
    else:
      print("You ran the program ", programData.iteration, " times")
    print("")
    print("Goodbye")
    break
  #------------------------------------------------------
  #error
  else:
    print("ERROR: incorrect input")
    

# FIND OPTIMUM DENSITY
#	********************************************************************


# PERFORM MULTIPLE DENSITY RUNS
#	********************************************************************


# FUNCTIONS TO PROCESS DATA (most likely, this is where the subroutines would be called)

def calculations():
  print("Density = ", "shoots/m^2")
  print()









